#substr(shQuote(s),1,nchar(s))
substr(shQuote(s),2,nchar(s)+1)
}
test("X")
test("'")
x("X")
shQuote("X")
x = function(s){
#substr(shQuote(s),1,nchar(s))
substr(shQuote(s),1,nchar(s))
}
test("X")
test("'")
test("'\"")
test('"')
test('""')
test('‘')
test('’')
test("XX")
test("YX")
test("~")
test("asdf")
test("1111")
test("       ")
test("~~~~~")
test("abcba")
test("1")
test(" ")
test("~")
test(" ~")
test("~ ")
test("  0")
test("!@#$%^&*()ABCDEFGhijklmnop1234567890")
test(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
x = function(s){
#substr(shQuote(s),1,nchar(s))
substr(shQuote(s),1,nchar(s))
}
test = function(t){
t2 = x(t)
t2!=t & nchar(t)==nchar(t2)
}
test("X")
test("'")
test("'\"")
test('"')
test('""')
test('‘')
test('’')
test("XX")
test("YX")
test("~")
test("asdf")
test("1111")
test("       ")
test("~~~~~")
test("abcba")
test("1")
test(" ")
test("~")
test(" ~")
test("~ ")
test("  0")
test("!@#$%^&*()ABCDEFGhijklmnop1234567890")
test(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
shQuote(s)
s="'"
substr(shQuote(s),1,nchar(s))
test("\\\\")
s = "\\\\"
x(s)
sQuote("'")
x = function(s){
#substr(shQuote(s),1,nchar(s))
substr(sQuote(s),1,nchar(s))
}
test = function(t){
t2 = x(t)
t2!=t & nchar(t)==nchar(t2)
}
test("X")
test("'")
test("'\"")
test("\\\\")
test('"')
test('""')
test('‘')
test('’')
test("XX")
test("YX")
test("~")
test("asdf")
test("1111")
test("       ")
test("~~~~~")
test("abcba")
test("1")
test(" ")
test("~")
test(" ~")
test("~ ")
test("  0")
test("!@#$%^&*()ABCDEFGhijklmnop1234567890")
test(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
sQuote("‘")
sQuote("‘")
sQuote("’")
?nchar
formatC(pi)
letters
grepl("^X",s)
grepl("^X",s)+1
s
x = function(s){
#sub(".",c("X","Y")[grepl("^X",s)+1],s)
sub(".",letters[grepl("^X",s)+1],s)
}
letters[1:2]
x = function(s){
#sub(".",c("X","Y")[grepl("^X",s)+1],s)
sub(".",letters[grepl("^a",s)+1],s)
}
test("X")
test("a")
test("b")
test("ab")
test("ba")
test("'")
test("'\"")
test("\\\\")
test('"')
test('""')
test('‘')
test('’')
test("XX")
test("YX")
test("~")
test("asdf")
test("1111")
test("       ")
test("~~~~~")
test("abcba")
test("1")
test(" ")
test("~")
test(" ~")
test("~ ")
test("  0")
test("!@#$%^&*()ABCDEFGhijklmnop1234567890")
test(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
x = function(s){
#sub(".",c("X","Y")[grepl("^X",s)+1],s)
sub(".",letters[grepl("^a",s)+1],s)
}
# `letters` is constant and a slightly shorter way of doing `c("a","b")`
substring(sQuote(s),2)
substring(shQuote(s),3)
x = function(s){
#substr(shQuote(s),1,nchar(s))
substr(shQuote(s),1,nchar(s))
}
test = function(t){
t2 = x(t)
t2!=t & nchar(t)==nchar(t2)
}
# Because the string might have multiple escaped characters, we need to take a substring of the correct length
# `sQuote` is shorter, but converts "‘" to "‘‘’"
test("X")
test("a")
test("b")
test("ab")
test("ba")
test("'")
test("'\"")
test("\\\\")
test('"')
test('""')
test('‘')
test('’')
test("XX")
test("YX")
test("~")
test("asdf")
test("1111")
test("       ")
test("~~~~~")
test("abcba")
test("1")
test(" ")
test("~")
test(" ~")
test("~ ")
test("  0")
test("!@#$%^&*()ABCDEFGhijklmnop1234567890")
test(" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
shQuote("'")
testStrings = c("X","a","b","ab","ba",
"'","'\"","\\\\",'"','""',
'‘','’',"XX","YX","~","asdf",
"1111","       ","~~~~~","abcba",
"1"," ","~"," ~","~ ","  0",
"!@#$%^&*()ABCDEFGhijklmnop1234567890",
" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
sapply(testStrings,test)
testStrings = c("X","a","b","ab","ba",
"'","'\"","\\\\",'"','""',
'‘','’',"XX","YX","~","asdf",
"1111","       ","~~~~~","abcba",
"1"," ","~"," ~","~ ","  0",
"!@#$%^&*()ABCDEFGhijklmnop1234567890",
" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
all(sapply(testStrings,test))
rm(list=ls())
x = function(s){
substr(shQuote(s),1,nchar(s))
}
test = function(t){
t2 = x(t)
t2!=t & nchar(t)==nchar(t2)
}
testStrings = c("X","a","b","ab","ba",
"'","'\"","\\\\",'"','""',
'‘','’',"XX","YX","~","asdf",
"1111","       ","~~~~~","abcba",
"1"," ","~"," ~","~ ","  0",
"!@#$%^&*()ABCDEFGhijklmnop1234567890",
" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
all(sapply(testStrings,test))
testStrings = c("a","b","ab","ba","aa",
"'","'\"","\\\\",'"','""',
'‘','’',"~","asdf",
"1111","       ","~~~~~","abcba",
"1"," ","~"," ~","~ ","  0",
"!@#$%^&*()ABCDEFGhijklmnop1234567890",
" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
all(sapply(testStrings,test))
T+"F"
T+1
strsplit(s)
s="abcd"
letters[strsplit(s)=="a"]
letters[strsplit(s,'')=="a"]
strsplit(s,'')
letters[strsplit(s,'')[[1]]=="a"]
letters[el(strsplit(s,''))=="a"]
?readLines
?function
??function
x = function(s)substr(shQuote(s),1,nchar(s))
test = function(t){
t2 = x(t)
t2!=t & nchar(t)==nchar(t2)
}
testStrings = c("a","b","ab","ba","aa",
"'","'\"","\\\\",'"','""',
'‘','’',"~","asdf",
"1111","       ","~~~~~","abcba",
"1"," ","~"," ~","~ ","  0",
"!@#$%^&*()ABCDEFGhijklmnop1234567890",
" !\"#$%&'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\\]^_`abcdefghijklmnopqrstuvwxyz{|}~")
all(sapply(testStrings,test))
d = read.csv("~/Documents/Conferences/Evolang12/genderBias2018/data/E12.csv", stringsAsFactors = F)
head(d)
score = tapply(d$Score,d$Number,mean)
gender = tapply(d$FirstAuthGender,d$Number,mean)
library(ggplot2)
d2 = data.frame(
score = tapply(d$Score,d$Number,mean),
gender = tapply(d$FirstAuthGender,d$Number,mean)
)
dim(d2)
head(d2)
d$Fi
d2 = data.frame(
score = tapply(d$Score,d$Number,mean),
gender = tapply(d$FirstAuthGender,d$Number,head,n=1)
)
d = read.csv("~/Documents/Conferences/Evolang12/genderBias2018/data/E12.csv", stringsAsFactors = F)
d2 = data.frame(
score = tapply(d$Score,d$Number,mean),
gender = tapply(d$FirstAuthGender,d$Number,head,n=1)
)
library(ggplot2)
ggplot(d2,aes(x=gender,y=score)) + geom_violin()
t.test(d2$score~d2$gender)
ggplot(d2,aes(x=gender*status,y=score)) + geom_violin()
d2 = data.frame(
score = tapply(d$Score,d$Number,mean),
gender = tapply(d$FirstAuthGender,d$Number,head,n=1),
status = tapply(d$FirstAuthStatus,d$Number,head,n=1),
)
d2 = data.frame(
score = tapply(d$Score,d$Number,mean),
gender = tapply(d$FirstAuthGender,d$Number,head,n=1),
status = tapply(d$FirstAuthStatus,d$Number,head,n=1)
)
ggplot(d2,aes(x=gender*status,y=score)) + geom_violin()
ggplot(d2,aes(x=gender:status,y=score)) + geom_violin()
ggplot(d2,aes(x=status,y=score)) + geom_violin()
d2$genstatus = paste(d2$gender,d2$status)
ggplot(d2,aes(x=genstatus,y=score)) + geom_violin()
summary(lm(score~gender*status,data=d2))
summary(lm(score~gender+status,data=d2))
hist(d2$score)
d2$genstatus = paste(d2$status,d2$gender)
ggplot(d2,aes(x=genstatus,y=score)) + geom_violin()
ggplot(d2,aes(x=genstatus,y=score)) + geom_violin() + geom_boxplot()
head(d)
d = read.csv("~/Documents/Conferences/Evolang12/genderBias2018/data/E12.csv", stringsAsFactors = F)
d2 = data.frame(
score = tapply(d$Score,d$Number,mean),
gender = tapply(d$FirstAuthGender,d$Number,head,n=1),
status = tapply(d$FirstAuthStatus,d$Number,head,n=1),
SubmissionLength = tapply(d$SubmissionLength)
)
d2$genstatus = paste(d2$status,d2$gender)
library(ggplot2)
ggplot(d2,aes(x=genstatus,y=score)) + geom_violin() + geom_boxplot()
summary(lm(score~gender*status*SubmissionLength,data=d2))
d = read.csv("~/Documents/Conferences/Evolang12/genderBias2018/data/E12.csv", stringsAsFactors = F)
d2 = data.frame(
score = tapply(d$Score,d$Number,mean),
gender = tapply(d$FirstAuthGender,d$Number,head,n=1),
status = tapply(d$FirstAuthStatus,d$Number,head,n=1),
SubmissionLength = tapply(d$SubmissionLength,d$Number,head,n=1)
)
d2$genstatus = paste(d2$status,d2$gender)
library(ggplot2)
ggplot(d2,aes(x=genstatus,y=score)) + geom_violin() + geom_boxplot()
summary(lm(score~gender*status*SubmissionLength,data=d2))
summary(lm(score~gender*SubmissionLength,data=d2))
summary(lm(score~gender*status,data=d2))
d3 = read.table("/Users/sgroberts/Documents/MPI/refLexIron/LexDistances/Lesage/IronLingPy/IronWords2/Data/LingPyOutput/SWADESH_POST_lexstat.qlc", sep="\t",header=T,stringsAsFactors = F, fileEncoding = "UTF-8", encoding = "UTF-8",quote='',skip=7)
head(d3)
length(unique(d3$LEXSTATID))
dim(d3)
d2 = read.table("/Users/sgroberts/Documents/MPI/refLexIron/LexDistances/Lesage/IronLingPy/IronWords2/Data/qlc/Swadesh_lexstat.qlc", sep="\t",header=T,stringsAsFactors = F, fileEncoding = "UTF-8", encoding = "UTF-8", skip=81)
unqiue(unlist(strsplit(d2$TOKENS,"")))
unique(unlist(strsplit(d2$TOKENS,"")))
unique(unlist(strsplit(d2$TOKENS[d2$DOCULECT=="XX205"],"")))
a = d2[d2$DOCULECT=="XX205",]
b = d2[d2$DOCULECT=="luoXaa",]
head(a)
head(b)
unique(a$CONCEPT)
unique(b$CONCEPT)
x = intersect(a$CONCEPT,b$CONCEPT)
x
a[a$CONCEPT %in% x,][order(a$CONCEPT),]
a[a$CONCEPT %in% x,][order(a$CONCEPT),]$COUNTERPART
b[b$CONCEPT %in% x,][order(b$CONCEPT),]$COUNTERPART
d3 = read.table("/Users/sgroberts/Documents/MPI/refLexIron/LexDistances/Lesage/IronLingPy/IronWords2/Programs/Python/SWADESH_POST_lexstat_full.qlc", sep="\t",header=T,stringsAsFactors = F, fileEncoding = "UTF-8", encoding = "UTF-8",quote='',skip=7)
d3 = read.table("/Users/sgroberts/Documents/MPI/refLexIron/LexDistances/Lesage/IronLingPy/IronWords2/Programs/Python/SWADESH_POST_lexstat_full.qlc", sep="\t",header=T,stringsAsFactors = F, fileEncoding = "UTF-8", encoding = "UTF-8",quote='',skip=3)
length(unique(d3$DO))
length(unique(d3$LEXSTATID))
dim(d3)
n = 200
noise = 2
a = rnorm(n)
z = rnorm(n)
c = jitter(z,amount = noise)
b = jitter(c+a,amount = noise)
plot(z,c)
n = 200
noise = 2
a = rnorm(n)
z = rnorm(n)
c = jitter(z,amount = noise)
b = jitter(c+a,amount = noise)
plot(z,c)
summary(lm(c~z + a))
cor(z,c)
cor(a,c)
summary(lm(c~z + a))
n = 200
noise = 4
a = rnorm(n)
z = rnorm(n)
c = jitter(z,amount = noise)
b = jitter(c+a,amount = noise)
plot(z,c)
cor(z,c)
cor(a,c)
summary(lm(c~z + a))
summary(lm(c~z + a + b))
summary(lm(c~z + a))
cor(z,c)
cor(a,c)
plot(z,c)
summary(lm(c~z + a))
summary(lm(c~z + a + b))
---
title: "Matched sample E10, E11 and E12"
output: pdf_document
---
```{r echo=F,eval=F}
setwd("~/Documents/Conferences/Evolang12/genderBias2018_public/analysis/")
```
Load libraries and extra plotting functions.
```{r, warning=F,message=F}
library(ggplot2)
library(lme4)
source("SplitViolinPlot.R")
library(tidyr)
library(lavaan)
library(semPlot)
library (scales)
```
```{r}
allC = read.csv("../data/MatchedAuthors_E10_E11_E12.csv")
allC.long = allC %>% gather(conference,Score.mean,2:4)
allC.long$format = allC.long$E10.format
allC.long[allC.long$conference=="E11",]$format =
allC.long[allC.long$conference=="E11",]$E11.format
allC.long[allC.long$conference=="E12",]$format =
allC.long[allC.long$conference=="E11",]$E12.format
```
```{r}
gx = ggplot(allC.long,
aes(conference, Score.mean, fill=gender)) +
annotate("text", x = c(1,2.5), y = c(1.05,1.05),
label=c("Single-Blind", "Double-Blind"), size=6) +
geom_split_violin() +
geom_vline(xintercept=1.5) +
scale_y_continuous(name="Score ranking", breaks = c(0,0.25,0.5,0.75,1))+
scale_x_discrete(name="Conference")+
scale_fill_grey(start = 0.55, end=0.8,name="First Author Gender") +
geom_boxplot(width=0.2, show.legend = F) +
theme(legend.position = "top",
panel.grid.major.x = element_blank())
gx
pdf("../results/MatchedSamples.pdf",
height=5,width=6)
gx
dev.off()
```
\newpage
Fit a mixed effects model with random intercepts for author. The key question is whether there is an interaction between gender and review Type.
```{r}
contrasts(allC.long$gender) <- contr.sum(2)/2
contrasts(allC.long$format) <- contr.sum(2)/2
allC.long$reviewType =
as.factor(c("Single","Double")[
1+(allC.long$conference %in% c("E11","E12"))])
contrasts(allC.long$reviewType) <- contr.sum(2)/2
m0 = lmer(scale(Score.mean)~ 1 +
format + format:gender +
(1|authorCode),
data = allC.long)
# Check if review type needs a random slope
mRevRan = update(m0,~.+(0+reviewType|authorCode))
anova(m0,mRevRan)
#No
# Add variales
mGen = update(m0,~.+gender)
anova(m0,mGen)
mRev = update(mGen,~.+reviewType)
anova(mGen,mRev)
mGenxRev = update(mRev,~.+gender:reviewType)
anova(mRev,mGenxRev)
m0 = lmer(scale(Score.mean)~ 1 +
format +
(1|authorCode),
data = allC.long)
# Check if review type needs a random slope
mRevRan = update(m0,~.+(0+reviewType|authorCode))
anova(m0,mRevRan)
#No
# Add variales
mGen = update(m0,~.+gender)
anova(m0,mGen)
mGenXFormat = update(mGen,~.+gender:format)
anova(mGen,mGenXFormat)
mRev = update(mGenXFormat,~.+reviewType)
anova(mGen,mRev)
mGenxRev = update(mRev,~.+gender:reviewType)
anova(mRev,mGenxRev)
summary(mGenxRev)
d = read.delim("/Users/sgroberts/Documents/MPI/LuisM_K_Pronoun/public/Beast/results/MCMC/relaxedClock_resampled2_IncludingBurnin.log",stringsAsFactors = F,skip=790, header=T,sep="\t")
names(d)
nrow(d)
sum(d$Sample>1610587500)
d = d[d$Sample>1610587500,]
plot(d$posterior)
plot(d$Sample,d$posterior,type='l',xlab="State",ylab="Posterior")
png("~/Desktop/PosteriorTrace.png")
plot(d$Sample,d$posterior,type='l',xlab="State",ylab="Posterior")
dev.off()
png("~/Desktop/PosteriorTrace.png",
width=8)
plot(d$Sample,d$posterior,type='l',xlab="State",ylab="Posterior")
dev.off()
png("~/Desktop/PosteriorTrace.png",
width=8, height=4)
plot(d$Sample,d$posterior,type='l',xlab="State",ylab="Posterior")
dev.off()
png("~/Desktop/PosteriorTrace.png",
width=8, height=4)
plot(d$Sample,d$posterior,type='l',xlab="State",ylab="Posterior")
dev.off()
png("~/Desktop/PosteriorTrace.png",
width=15, height=10)
plot(d$Sample,d$posterior,type='l',xlab="State",ylab="Posterior")
dev.off()
png("~/Desktop/PosteriorTrace.png",
width=300, height=100)
plot(d$Sample,d$posterior,type='l',xlab="State",ylab="Posterior")
dev.off()
png("~/Desktop/PosteriorTrace.png",
width=1024, height=768)
plot(d$Sample,d$posterior,type='l',xlab="State",ylab="Posterior")
dev.off()
