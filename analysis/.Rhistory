library(car)
library(caret)
library(dplyr)
library(party)
library(lmerTest)
library(stargazer)
```
## Load data
This section uses the file `EvoLang_ReadingScores_E8_to_E12.csv`. It includes the following variables:
-  `conference`:  Conference
-  `gender`:  Gender of first author
-  `student`:  Student status
-  `format`:  Full paper or short abstract
-  `char_count`, `word_count`, `sent_count`, `sybl_count`:  Number of characters, words, sentences and syllables.  These distributions have been scaled and centrered.
-  `*_score`:  Various measures of readability, calculated using the tools from Hengel (2016).
-  Score.mean:   Mean raw score given by reviewers (scaled between 0 and 1, higher = better paper)
Read the data:
```{r echo=F,eval=F}
setwd("~/Documents/Conferences/Evolang12/genderBias2018_public/analysis/")
```
```{r}
readScores = read.csv("../data/EvoLang_ReadingScores_E8_to_E12.csv",stringsAsFactors = F)
mean(readScores$fleschkincaid_score)
mean(readScores$dalechall_score)
sd(readScores$dalechall_score)
sd(readScores$fleschkincaid_score)
cor(readScores$fleschkincaid_score,readScores$dalechall_score)
tapply(readScores[readScores$conference=="E11",]$fleschkincaid_score,readScores[readScores$conference=="E11",]$gender,mean)
diff(tapply(readScores[readScores$conference=="E11",]$fleschkincaid_score,readScores[readScores$conference=="E11",]$gender,mean))
diff(tapply(readScores[readScores$conference=="E12",]$fleschkincaid_score,readScores[readScores$conference=="E12",]$gender,mean))
setwd("~/Documents/Conferences/Evolang12/genderBias2018/analysis/")
library(readability)
setwd("~/Documents/Conferences/Evolang12/genderBias2018/analysis/")
base = "../data/abstracts/final/"
fx= list.files(base,"*.txt")
f = fx[1]
f
x = readLines(paste0(base,f))
x
x = strsplit(x,"\\.")[[1]]
x
x = paste(strsplit(x,"\\.")[[1]],".",sep="")
x
x = readLines(paste0(base,f))
x = paste(strsplit(x,"\\.")[[1]],".",sep="")
x
readability(x)
?readability(x)
readability(x,T)
(x3 <- with(presidential_debates_2012, readability(dialogue, TRUE)))
data("presidential")
(x3 <- with(presidential_debates_2012, readability(dialogue, TRUE)))
library(syllable)
(x3 <- with(presidential_debates_2012, readability(dialogue, TRUE)))
x2
x3
x = readLines(paste0(base,f))
x
readability(x,T)
library(readability)
setwd("~/Documents/Conferences/Evolang12/genderBias2018/analysis/")
base = "../data/abstracts/final/"
fx= list.files(base,"*.txt")
rx = data.frame(
fleschkincaid_score = NA,
file = NA
)
for(f in fx){
x = readLines(paste0(base,f))
rx = rbind(rx,
c(readability(x,T)$Flesch_Kincaid,f))
}
rx
conf = strsplit(f,"_")[[1]][1]
conf
sample(fx,10)
sample(fx,10)
sample(fx,10)
sample(fx,10)
sample(fx,10)
sample(fx,10)
sample(fx,10)
sample(fx,10)
sample(fx,10)
sample(fx,10)
sample(fx,10)
strsplit(f,"_")[[1]][-1]
conf = paste(strsplit(f,"_")[[1]][-1],collapse="_")
conf
library(readability)
setwd("~/Documents/Conferences/Evolang12/genderBias2018/analysis/")
base = "../data/abstracts/final/"
fx= list.files(base,"*.txt")
rx = data.frame(
fleschkincaid_score = NA,
conference = NA,
file = NA
)
for(f in fx){
conf = strsplit(f,"_")[[1]][1]
fn = paste(strsplit(f,"_")[[1]][-1],collapse="_")
x = readLines(paste0(base,f))
rx = rbind(rx,
c(readability(x,T)$Flesch_Kincaid,conf,fn))
}
dim(rx)
head(rx)
library(stringr)
library(gender)
library(ggplot2)
try(setwd("~/Documents/Conferences/Evolang12/genderBias2018/processing/"))
splitPages = function(X){ strsplit(X," ")[[1]][2]}
findNum = function(X){
X = strsplit(X,"\\.")[[1]][1]
substr(X,2,nchar(X))
}
findNum2 = function(X){
X = strsplit(X,"_")[[1]][4]
strsplit(X,"\\.")[[1]][1]
}
numPages10 = read.csv("../data/abstracts/EvoLang10/numPages.csv", stringsAsFactors = F)
numPages10$numPages = as.numeric(sapply(numPages10$pages, splitPages))
numPages10$num = sapply(numPages10$file,findNum)
numPages10$format = c("Abstract","Paper")[1+(numPages10$numPages>3)]
numPages11 = read.csv("../data/abstracts/EvoLang11/numPages.csv", stringsAsFactors = F)
numPages11$numPages = as.numeric(sapply(numPages11$pages, splitPages))
numPages11$num = sapply(numPages11$file,findNum2)
numPages11$format = c("Abstract","Paper")[1+(numPages11$numPages>3)]
numPages12 = read.csv("../data/abstracts/EvoLang12/numPages.csv", stringsAsFactors = F)
numPages12$numPages = as.numeric(sapply(numPages12$pages, splitPages))
numPages12$num = sapply(numPages12$file,findNum2)
numPages12$format = c("Abstract","Paper")[1+(numPages12$numPages>3)]
papers = read.csv("../data/abstracts/EvoLang10/abstracts.csv", stringsAsFactors = F , encoding = 'uft-8', fileEncoding = 'utf-8')
authors = read.csv("../data/abstracts/authors.csv", stringsAsFactors = F, encoding = 'uft-8', fileEncoding = 'utf-8')
authors$lastAuthor  = unlist(tapply(authors$position,authors$id,function(X){c(rep(F,length(X)-1),T)}))
lastAuthors = authors[authors$lastAuthor & authors$position!=1,]
lastAuthors$first_name_orig = lastAuthors$first_name
x =  sapply(lastAuthors$first_name,function(X){
x = strsplit(X," ")[[1]]
as.vector(unlist(x[which(nchar(x)==max(nchar(x)))]))[1]
})
names(x) = NULL
lastAuthors$first_name = as.character(as.vector(x))
lastAuthorNames = unique(paste(lastAuthors$first_name,lastAuthors$last_name))
lastAuthorGender = gender(lastAuthors$first_name)
lastAuthorGender$conf = lastAuthorGender$proportion_male
sel = lastAuthorGender$proportion_male < lastAuthorGender$proportion_female
lastAuthorGender$conf[sel] = lastAuthorGender$proportion_female[sel]
lastAuthorGender[lastAuthorGender$conf<0.95,]
lastAuthors[lastAuthors$first_name %in% lastAuthorGender[lastAuthorGender$conf<0.95,]$name,c("first_name","last_name")]
lastAuthorGender[lastAuthorGender$name=="Marion",]$gender = "female"
lastAuthorGender[lastAuthorGender$name=="Adi",]$gender = "female"
lastAuthorGender[lastAuthorGender$name=="Deniz",]$gender = "female"
lastAuthorGender[lastAuthorGender$name=="Alexandr",]$gender = "male"
lastAuthorGender[lastAuthorGender$name=="Carel",]$gender = "male"
lastAuthorGender[lastAuthorGender$name=="chris",]$gender = "male"
lastAuthorGender[lastAuthorGender$name=="Merlin",]$gender = "male"
lastAuthorGender[lastAuthorGender$name=="Kang",]$gender = "male"
lastAuthorGender[lastAuthorGender$name=="Mikael",]$gender = "male"
lastAuthorGender[lastAuthorGender$name=="Takaya",]$gender = "male"
lastAuthorGender[lastAuthorGender$name=="Kristian",]$gender = "male"
lastAuthorGender[lastAuthorGender$name=="Zarin",]$gender = "female"
lastAuthorGender[lastAuthorGender$name=="Robin",]$gender = "male"
lastAuthors$gender = lastAuthorGender[match(lastAuthors$first_name,lastAuthorGender$name),]$gender
fixg = list(
c("Tajul","male"),
c("Hiva","male"),
c("Jean-Luc","male"),
c("Louis-Jean","male"),
c("G++ran","male"),
c("Keelin","female"),
c("Arike","female"),
c("Sverker","male"),
c("Ofer","male"),
c("Ades","male"),
c("J.J.","male"),
c("Ruey-Singh","male"),
c("Jean-Julien","male"),
c("M+++nica","female"),
c("++ukasz","male"),
c("Hans-Joachim","male"),
c("Bj++rn","male"),
c("Gang","male"),c("Jiangtao","male"),c("V++ctor","male"),c("Txuss","male"),c("WAIDI","male"),c("SHIGETO","male"),c("Hisatsugu","male"),c("Yoichi","male"),c("Coriandre","male"),c("Mutsumi","female"),c("Masahiko","male"),c("Gentaro","male"),c("Hama","female"),c("Huei-ling","female"),c("YOSHIMASA","male"),c("Monojit","male"),c("Yulri","female"),c("Hideyuki","male"),c("Yulri","female"),c("JOSE-RAMON","male"),c("Jean-Louis","male"),c("Niloy","male",""),c("Douglas","male"),c("Jaume","male",""),c("Jan-Olof","male"),c("N.J.","male"),c("Christian","male"),c("Joost","male"),c("Remko","male"),c("Ofer","male"),c("Son-Hwa","female"),c("PRZEMYS++AW","male"),c("PRZEMYS++AW","male"),
c("Fulvia","female"), c("Wai","male"))
for(i in 1:length(fixg)){
lastAuthors[lastAuthors$first_name==fixg[[i]][1],]$gender = fixg[[i]][2]
}
authors$lastAuthorGender = lastAuthors[match(authors$id,lastAuthors$id),]$gender
write.csv(authors,file="../data/LastAuthorsE9E10E11.csv")
# Continue
authors = authors[authors$position==1,]
authors$fullName = paste(authors$first_name,authors$last_name)
gender = read.csv("../data/gender/AllConferenceData_WithNames.csv", stringsAsFactors = F)
gender$conference2 = "E9"
gender$conference2[gender$conference=="EvoLang10"] = "E10"
gender$conference2[gender$conference=="EvoLang11"] = "E11"
authors$gender = gender[match(authors$fullName,gender$firstAuthor),]$FirstAuthorGender
rscores = read.csv("../data/readingScores/E9-10ReadingScores.csv", stringsAsFactors = F)
rscores$num = str_extract(rscores$file, "p([0-9]+)")
rscores$num = substr(rscores$num,2,nchar(rscores$num))
rscores$type = "pdf"
rscores[grepl("doc",rscores$file),]$type = "doc"
# Prefer doc over pdf
keepFiles = tapply(rscores$file,rscores$num,function(X){
if(sum(grepl("doc",X))>1){
return(X[grepl("doc",X)][1])
}
return(X[1])
})
rscores = rscores[rscores$file %in% keepFiles,]
ratings = read.csv("../data/abstracts/EvoLang10/scores.csv", stringsAsFactors = F, encoding = 'uft-8', fileEncoding = 'utf-8')
rscores$reviewer_score = ratings[match(rscores$num,as.character(ratings$num)),]$rating
#rscores$gender = authors[match(rscores$num,as.character(authors$id)),]$gender
rscores$gender = gender[match(rscores$num,gender$Num),]$FirstAuthorGender
rscores$gender = gender[match(rscores$num,gender$Num),]$FirstAuthorGender
rscores$conference = papers[match(rscores$num,as.character(papers$num)),]$conference
rscores[as.numeric(rscores$num)>605,]$conference = "E10"
rscores[is.na(rscores$conference),]$conference = "E8"
rscores$author = authors[match(rscores$num,as.character(authors$id)),]$fullName
rscores = rscores[order(rscores$gender,rscores$author),]
review = read.csv("../data/EvoLang_Scores_8_to_12_WITH_NUMS.csv", stringsAsFactors = F)
#rscores$Score.mean = review[match(
#  paste(rscores$num,rscores$conference),
#  paste(review$num,review$conference)
#),]$Score.mean
rscores$gender = review[match(
paste(rscores$conference, as.numeric(rscores$num)),
paste(review$conference, review$num)),]$FirstAuthorGender
rscores$lastAuthorGender = authors[match(rscores$num,authors$id),]$lastAuthorGender
boxplot(rscores[!is.na(rscores$lastAuthorGender),]$fleschkincaid_score~
paste(rscores[!is.na(rscores$lastAuthorGender),]$gender,
rscores[!is.na(rscores$lastAuthorGender),]$lastAuthorGender))
rscores= rscores[!is.na(rscores$gender),]
rscores$format = numPages10[match(rscores$num,numPages10$num),]$format
rscores[is.na(rscores$format),]$format = c("Abstract","Paper")[1+(rscores[is.na(rscores$format),]$word_count>1200)]
stu = read.csv("../data/abstracts/EvoLang8/E8AuthorsStatus.csv",stringsAsFactors = F)
rscores$student = gender[match(paste(rscores$conference,rscores$num),
paste(gender$conference2,gender$Num)),]$student
rscores$Score.mean = review[match(paste(rscores$conference,rscores$num),
paste(review$conference,review$num)),]$Score.mean
write.csv(rscores,"../data/E8_E9_E10_data.csv", fileEncoding = "utf-8")
#------------
r11scores = read.csv("../data/readingScores/E11ReadingScores.csv", stringsAsFactors = F)
r11scores$file = gsub("\\.","_",r11scores$file)
r11scores$num = sapply(r11scores$file,function(X){
strsplit(X,"_")[[1]][4]
})
r11scores$conference = r11scores$batch
p11 = read.csv("../data/abstracts/EvoLang11/papers/author.csv", stringsAsFactors = F)
p11 = p11[!duplicated(p11$submission..),]
p11$fullname = paste(p11$first.name,p11$last.name)
gender11 = gender[gender$conference=="EvoLang11",]
gender11$num = gender11$Num
r11scores$conference2 ="E11"
r11scores$gender = gender11[match(r11scores$num,gender11$num),]$FirstAuthorGender
r11scores$student = gender11[match(r11scores$num,gender11$num),]$student
r11scores$Score.mean = review[match(
paste(r11scores$conference2,r11scores$num),
paste(review$conference,review$num)),]$Score.mean
r11scores = r11scores[!is.na(r11scores$Score.mean),]
r11scores$format = numPages11[match(r11scores$num,numPages11$num),]$format
######
r12 = read.csv("../data/readingScores/E12ReadingScores.csv", stringsAsFactors = F)
r12$num = sapply(r12$file, function(X){
X = gsub("\\.","_",X)
strsplit(X,"_")[[1]][4]
})
codes12 = read.csv("../data/abstracts/EvoLang12/numberCodes.csv", stringsAsFactors = F)
e12 =read.csv("../data/E12.csv",stringsAsFactors = F)
e12$num = codes12[match(e12$Number,codes12$code),]$num
score.mean12 = tapply(e12$Score, e12$num,mean)
r12$Score.mean = score.mean12[match(r12$num,names(score.mean12))]
r12$gender = e12[match(r12$num,e12$num),]$FirstAuthGender
r12$student = e12[match(r12$num,e12$num),]$FirstAuthStatus
r12$SubmissionLength = e12[match(r12$num,e12$num),]$SubmissionLength
r12$Number = e12[match(r12$num,e12$num),]$Number
r12$format = numPages12[match(r12$num,numPages12$num),]$format
r12 = r12[complete.cases(r12),]
r12$conference = r12$batch
write.csv(r12[,!names(r12) %in% c("file","num")], file="../data/readingScores/E12ReadingScores_edited.csv")
cols = c("conference","num","gender","student","format",
"char_count", "word_count","sent_count",
"sybl_count", "notdalechall_count",
"polysyblword_count","flesch_score",
"fleschkincaid_score","gunningfog_score",
"smog_score","dalechall_score","Score.mean")
rall = rbind(
rscores[,cols],
r11scores[,cols],
r12[,cols]
)
rall$gender[rall$gender=='m'] = "M"
rall$gender[rall$gender=='f'] = "F"
for(conf in unique(rall$conference)){
sm = rall[rall$conference==conf,]$Score.mean
sm = rank(sm)
sm = sm - min(sm)
sm = sm / max(sm)
rall[rall$conference==conf,]$Score.mean = sm
}
rownames(rall) = make.names(1:nrow(rall),unique = T)
# For extra protection, let's scale the char_count etc.
rall$char_count = scale(rall$char_count)
rall$word_count = scale(rall$word_count)
rall$sent_count = scale(rall$sent_count)
rall$sybl_count = scale(rall$sybl_count)
rall$notdalechall_count = scale(rall$notdalechall_count)
rall$polysyblword_count = scale(rall$polysyblword_count)
rall$conference[rall$conference=="Evolang11"] = "E11"
rall$conference[rall$conference=="Evolang12"] = "E12"
rall[rall$num=="606",]$gender = "M"
rall[rall$num=="607",]$gender = "M"
rall[rall$num=="608",]$gender = "M"
head(rall)
head(rx)
rx$file
x = rx$file
x  = gsub("EvoLang_12_paper_","",x)
x  = gsub("\\.txt","",x)
x  = gsub("\\.doc","",x)
x
x = rx$file
x  = gsub("EvoLang_12_paper_","",x)
x  = gsub("\\.txt","",x)
x  = gsub("\\.doc","",x)
x  = gsub("p","",x)
x
x = rx$file
x  = gsub("EvoLang_12_paper_","",x)
x  = gsub("EvoLang_11_paper_","",x)
x  = gsub("\\.txt","",x)
x  = gsub("\\.doc","",x)
x  = gsub("p","",x)
head(rall$conference)
table(rx$conference)
library(readability)
setwd("~/Documents/Conferences/Evolang12/genderBias2018/analysis/")
base = "../data/abstracts/final/"
fx= list.files(base,"*.txt")
rx = data.frame(
fleschkincaid_score = NA,
conference = NA,
file = NA
)
for(f in fx){
conf = strsplit(f,"_")[[1]][1]
fn = paste(strsplit(f,"_")[[1]][-1],collapse="_")
x = readLines(paste0(base,f))
x = paste(x,collapse=" ")
rx = rbind(rx,
c(readability(x,T)$Flesch_Kincaid,conf,fn))
}
x = rx$file
x  = gsub("EvoLang_12_paper_","",x)
x  = gsub("EvoLang_11_paper_","",x)
x  = gsub("\\.txt","",x)
x  = gsub("\\.doc","",x)
x  = gsub("p","",x)
rx$conference[rx$conference=="Evolang8"]  = "E8"
rx$conference[rx$conference=="Evolang9"]  = "E9"
rx$conference[rx$conference=="Evolang10"]  = "E10"
rx$conference[rx$conference=="Evolang11"]  = "E11"
rx$conference[rx$conference=="Evolang12"]  = "E12"
head(rx)
x
head(rall)
rall$num
rall$RFK = rx[match(paste(rx$conference,rx$num),
paste(rall$conference,rall$num)),]$fleschkincaid_score
rall$RFK = rx[match(paste(rall$conference,rall$num),
paste(rx$conference,rx$num)),]$fleschkincaid_score
plot(rall$RFK,rall$fleschkincaid_score)
rall$RFK
f
x = readLines(paste0(base,f))
x = paste(x,collapse=" ")
x
readability(x,T)$Flesch_Kincaid
rx = data.frame(
fleschkincaid_score = NA,
conference = NA,
file = NA
)
for(f in fx){
conf = strsplit(f,"_")[[1]][1]
fn = paste(strsplit(f,"_")[[1]][-1],collapse="_")
x = readLines(paste0(base,f))
x = paste(x,collapse=" ")
rx = rbind(rx,
c(readability(x,T)$Flesch_Kincaid,conf,fn))
}
head(rx)
library(readability)
setwd("~/Documents/Conferences/Evolang12/genderBias2018/analysis/")
base = "../data/abstracts/final/"
fx= list.files(base,"*.txt")
rx = data.frame(
fleschkincaid_score = NA,
conference = NA,
file = NA
)
for(f in fx){
conf = strsplit(f,"_")[[1]][1]
fn = paste(strsplit(f,"_")[[1]][-1],collapse="_")
x = readLines(paste0(base,f))
x = paste(x,collapse=" ")
rx = rbind(rx,
c(readability(x,T)$Flesch_Kincaid,conf,fn))
}
head(rx)
x = rx$file
x  = gsub("EvoLang_12_paper_","",x)
x  = gsub("EvoLang_11_paper_","",x)
x  = gsub("\\.txt","",x)
x  = gsub("\\.doc","",x)
x  = gsub("p","",x)
head(rx)
xxx = rx
rx$conference[rx$conference=="Evolang8"]  = "E8"
head(rx)
rx$conference[rx$conference=="Evolang9"]  = "E9"
rx$conference[rx$conference=="Evolang10"]  = "E10"
rx$conference[rx$conference=="Evolang11"]  = "E11"
rx$conference[rx$conference=="Evolang12"]  = "E12"
head(rx)
rall$RFK = rx[match(paste(rall$conference,rall$num),
paste(rx$conference,rx$num)),]$fleschkincaid_score
head(rall)
paste(rall$conference,rall$num)
paste(rx$conference,rx$num)
head(rx)
rx$file
rx$conference[rx$conference=="Evolang8-10"]  = "E8"
rall$conference2[rall$conference2=="E9"]
rall$conference2 = rall$conference
rall$conference2[rall$conference2=="E9"]
rall$conference2[rall$conference2=="E9"] = "E8"
rall$conference2[rall$conference2=="E910"] = "E8"
match(paste(rall$conference,rall$num),
paste(rx$conference,rx$num))
table(rall$conference)
table(rx$conference)
head(rall$num)
head(rx$num)
rall$RFK = rx[match(paste(rall$conference2,rall$num),
paste(rx$conference,x)),]$fleschkincaid_score
rall$RFK
plot(rall$fleschkincaid_score,rall$RFK)
cor.test(rall$fleschkincaid_score,rall$RFK)
cor.test(as.numeric(rall$fleschkincaid_score),as.numeric(rall$RFK))
library(xtable)
library(RColorBrewer)
try(setwd("~/Documents/Conferences/Evolang12/genderBias2018_public/analysis/"))
allData = read.csv("../data/EvoLang_Scores_8_to_12.csv",stringsAsFactors = F)
# relabel factor
allData$FirstAuthorGender = factor(allData$FirstAuthorGender,levels=c("F","M"),labels=c("Female","Male"))
allData$gender = allData$FirstAuthorGender
allData$review = factor(c("Single","Double")[(allData$conference %in% c("E11","E12"))+1])
allData$conference = factor(allData$conference,levels = c("E8","E9","E10","E11","E12"))
allData$format = factor(allData$format)
allData$student[!is.na(allData$student) &
allData$student=="Faculty"] = "Non-Student"
allData$student[!is.na(allData$student) &
allData$student=="EC"] = "Non-Student"
allData$student = factor(allData$student)
###
readScores = read.csv("../data/EvoLang_ReadingScores_E8_to_E12.csv",stringsAsFactors = F)
readScores$fleschkincaid_score_scaled = scale(readScores$fleschkincaid_score)
readScores$dalechall_score_scaled = scale(readScores$dalechall_score)
readScores$student[readScores$student=="EC"] = "Non-Student"
readScores$student[readScores$student=="Faculty"] = "Non-Student"
# Remove an outlier
readScores = readScores[readScores$fleschkincaid_score_scaled<6,]
readScores$gender = factor(readScores$gender)
readScores$conference = factor(readScores$conference,
levels = c("E8","E9","E10","E11","E12"))
###
plotStackedBar = function(dx,filename){
pdf(filename,width=5, height=4)
par(mar=c(4,4,2,1))
xtabs(~gender+conference,dx) -> x
xvals <- barplot(x, beside=T, cex.names=1.5, ylim=c(0,150) )
xtabs(~gender+conference+student,dx) -> x2
textadjx = 3
text(xvals[1,1],0-textadjx,x[1,1],pos=3,col='white')
text(xvals[2,1],0-textadjx,x[2,1],pos=3)
xwd <- .5
for (conf in 2:5){
# Female non-students
polygon( c( rep(xvals[1,conf]-xwd,2), rep(xvals[1,conf]+xwd,2) ),
c(0, x2[1,conf,1], x2[1,conf,1], 0), col="#d95f02" )
text(xvals[1,conf],0-textadjx,x2[1,conf,1],pos=3)
# Male non-students
polygon( c( rep(xvals[2,conf]-xwd,2), rep(xvals[2,conf]+xwd,2) ),
c(0, x2[2,conf,1], x2[2,conf,1], 0), col="#d95f02" )
text(xvals[2,conf],0-textadjx,x2[2,conf,1],pos=3)
# Female students
polygon( c( rep(xvals[1,conf]-xwd,2), rep(xvals[1,conf]+xwd,2) ), c(x2[1,conf,1], x2[1,conf,1]+x2[1,conf,2], x2[1,conf,1]+x2[1,conf,2], x2[1,conf,1]), col="#1b9e77" )
text(xvals[1,conf],x2[1,conf,1]-textadjx,x2[1,conf,2], pos = 3)
# Male students
polygon( c( rep(xvals[2,conf]-xwd,2), rep(xvals[2,conf]+xwd,2) ), c(x2[2,conf,1], x2[2,conf,1]+x2[2,conf,2], x2[2,conf,1]+x2[2,conf,2], x2[2,conf,1]), col="#1b9e77" )
text(xvals[2,conf],x2[2,conf,1]-textadjx,x2[2,conf,2], pos = 3)
}
text( xvals[1,], rep(-5,5),rep("F",5), xpd=T )
text( xvals[2,], rep(-5,5),rep("M",5), xpd=T )
legend(3,-18, fill=c("#d95f02","#1b9e77"), legend=c("Non-students", "Students"), horiz=T ,bty = 'n',xpd=T)
title(ylab="Number of submissions")
dev.off()
}
plotStackedBar(allData,"../results/StackedBar_ReviewScores.pdf")
plotStackedBar(readScores,"../results/StackedBar_ReadingScores.pdf")
?curve
